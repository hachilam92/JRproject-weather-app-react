{"version":3,"sources":["App/services/unit.js","App/components/Current/Country/country.js","App/api/weather-class.js","App/api/get-weather.js","App/components/Current/City/city.js","App/components/Current/Info/info.js","App/components/Current/current.js","App/components/WeatherBottom/OtherCities/other-city-button.js","App/components/WeatherBottom/OtherCities/other-city-buttons.js","App/components/WeatherBottom/OtherCities/other-cities.js","App/components/WeatherBottom/ForecastWeather/forecast-list-item.js","App/components/WeatherBottom/ForecastWeather/forecast-weather.js","App/components/WeatherBottom/weather-bottom.js","App/components/Weather/weather.js","App/App.js","serviceWorker.js","index.js"],"names":["xDigits","number","x","formatted","Math","round","module","exports","toCelsius","Kelvin","Celsius","toFahrenheit","Fahrenheit","windDirect","windDegree","parseInt","directionGap","Country","props","useState","hide","setHide","country","setCountry","toggleInput","handleSubmit","e","preventDefault","onCountryChange","className","onClick","onSubmit","value","onChange","target","onBlur","onFocus","units","require","Weather","data","this","temperature","main","temp","humidity","wind","speed","weather","icon","description","Forecast","day","axios","APPID","process","openWeather","create","baseURL","params","appid","requestWeather","location","weatherType","route","response","get","q","getWeather","cc","city","Promise","all","then","responseArray","curRes","forRes","cityName","name","countryCode","current","forecast","filteredForecast","days","dayList","today","Date","currentIndex","getDay","formattedForecast","i","length","push","formatForecast","rawForecast","filterRawForecast","list","map","item","catch","err","console","log","message","CurrentCity","setCity","inputCity","a","setLoading","undefined","newData","alert","updateDataArray","checkCityInput","updateData","CurrentInfo","Current","defaultValue","children","currentData","setCountryCode","useEffect","inputCountry","inputCode","validatedInput","getCode","getName","getCountryCode","toUpperCase","OtherCityButton","handleClick","onOtherCitiesClick","index","src","alt","Component","OtherCityButtons","cityArray","buttons","key","OtherCity","ForecastListItem","iconUrlAddress","info","ForecastWeather","forecastList","forecastArray","WeatherBottom","dataArray","slice","loading","useReducer","action","newDataArray","type","array","pop","splice","Error","unshift","dispatch","newArray","defaultCities","defaultCountry","cityData","buttonIndex","initialRequest","style","borderRadius","arrayIndex","findIndex","config","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.01bce3ae.chunk.js","sourcesContent":["function toCelsius (Kelvin) {\r\n    let Celsius = Kelvin - 273.15;\r\n    Celsius = xDigits(Celsius);\r\n    return Celsius;\r\n}\r\n\r\nfunction toFahrenheit (Kelvin) {\r\n    let Fahrenheit = 9 * (Kelvin - 273.15) / 5 + 32;\r\n    Fahrenheit = xDigits(Fahrenheit);\r\n    return Fahrenheit;\r\n}\r\n\r\n// default to one digits\r\nfunction xDigits (number, x = 1) {\r\n    let formatted = Math.round(number * 10**x) / 10**x;\r\n    return formatted;\r\n}\r\n\r\nfunction windDirect (windDegree) {\r\n    const directionList = [\"N\", \"NNE\",\"NE\",\"ENE\",\"E\",\"ESE\",\"SE\",\"SSE\",\"S\",\"SSW\",\"SW\",\"WSW\",\"W\",\"WNW\",\"NW\",\"NNW\",\"N\"];\r\n    const directionGap = 22.5;\r\n    const offset = directionGap/2;   //11.25 degree\r\n    const indexMapping = parseInt((windDegree + offset) / directionGap) + 1;\r\n    let direction = directionList[indexMapping];\r\n    return direction; \r\n}\r\n\r\nmodule.exports = {\r\n    toCelsius,\r\n    toFahrenheit,\r\n    windDirect\r\n};","import React, {useState} from 'react';\r\nimport './country.scss';\r\n\r\nfunction Country(props) {\r\n\tconst defaultValue = 'country or code';\r\n\tconst [hide, setHide] = useState(true); \r\n\tconst [country, setCountry] = useState(defaultValue);\r\n    \r\n\tfunction toggleInput() {\r\n\t\tsetHide(!hide);\r\n\t\tsetCountry(defaultValue);    \r\n\t}\r\n\r\n\tfunction handleChange(e) {\r\n\t\t\tsetCountry(e.target.value);\r\n\t}\r\n\r\n\tfunction handleFocus() {\r\n\t\tif (country === defaultValue) {\r\n\t\t\tsetCountry('');\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\tprops.onCountryChange(country);\r\n\t\ttoggleInput();\r\n\t}\r\n\r\n\tfunction handleBlur(e) {\r\n\t\treturn (country === '')? toggleInput() : handleSubmit(e);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className = 'Country'>\r\n\t\t\t<div    \r\n\t\t\t\tclassName = 'Country__name'\r\n\t\t\t\tonClick = {toggleInput}\r\n\t\t\t>\r\n\t\t\t\t{props.country}\r\n\t\t\t</div>\r\n\t\t\t{hide?\r\n\t\t\t\t''\r\n\t\t\t:\r\n\t\t\t\t<form   \r\n\t\t\t\t\tclassName = 'Country__form'\r\n\t\t\t\t\tonSubmit = {handleSubmit}\r\n\t\t\t\t>\r\n\t\t\t\t\t<input  \r\n\t\t\t\t\t\tvalue = {country}\r\n\t\t\t\t\t\tonChange = {handleChange}\r\n\t\t\t\t\t\tonBlur = {handleBlur}\r\n\t\t\t\t\t\tonFocus = {handleFocus}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</form> \r\n\t\t\t}   \r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Country;","const units = require ('../services/unit');\r\n\r\nclass Weather {\r\n\tconstructor(data) {\r\n\t\tthis.temperature = units.toCelsius(data.main.temp);\r\n\t\tthis.humidity = data.main.humidity;\r\n\t\tthis.wind = data.wind.speed;\r\n\t\tthis.weather = data.weather[0].main;\r\n\t\tthis.icon = data.weather[0].icon;\r\n\t\tthis.description = data.weather[0].description;\r\n\t}\r\n}\r\n\r\nclass Forecast {\r\n\tconstructor(data, day) {\r\n\t\tthis.day = day;\r\n\t\tthis.temperature = Math.round(data.temperature);\r\n\t\tthis.icon = data.icon;\r\n\t\tthis.description = data.description;\r\n\t}\r\n}\r\nexport {Weather, Forecast};\r\n","import {Weather, Forecast} from './weather-class';\r\n\r\nconst axios = require('axios');\r\n\r\nlet APPID =`${process.env.REACT_APP_APPID}`;      // Fill in API key\r\n\r\nconst openWeather = axios.create({\r\n\tbaseURL: 'https://api.openweathermap.org/data/2.5',\r\n\tparams: {\r\n\t\tappid: APPID\r\n\t}            \r\n});\r\n\r\nfunction requestWeather (location, weatherType = 'current') {\r\n\tconst route = (weatherType === 'forecast')? '/forecast':'/weather';\r\n\tconst response = openWeather.get(route, {\r\n\t\tparams: { \r\n\t\t\tq: location\r\n\t\t}\r\n\t});\r\n\treturn response;\r\n}\r\n\r\nfunction getWeather (cc, city) {\r\n\tconst location = `${city}, ${cc}`;\r\n\treturn Promise.all([requestWeather(location), requestWeather(location, 'forecast')])\r\n\t.then((responseArray) =>{\r\n\t\t\tconst curRes = responseArray[0];\r\n\t\t\tconst forRes = responseArray[1];\r\n\t\t\tconst cityName = forRes.data.city.name;\r\n\t\t\tconst countryCode = forRes.data.city.country;\r\n\t\t\tconst current = new Weather (curRes.data);\r\n\t\t\tconst rawForecast = forRes.data.list.map(item => new Weather(item));\r\n\t\t\tconst filteredForecast = filterRawForecast(rawForecast);\r\n\t\t\tconst forecast = formatForecast(filteredForecast);\r\n\t\t\tconst data = {cityName, countryCode, current, forecast};\r\n\t\t\treturn data;\r\n\t})\r\n\t.catch(err => {\r\n\t\tconsole.log(err.message);\r\n\t});\r\n}\r\n\r\nfunction filterRawForecast (rawForecast) {\r\n\tlet filteredForecast = [];\r\n\tfor(let i = 0; i < rawForecast.length; i += 8) {\r\n\t\tfilteredForecast.push(rawForecast[i]);\r\n\t}\r\n\treturn filteredForecast;\r\n}\r\n\r\nfunction formatForecast (filteredForecast, days = 5) {\r\n\tconst dayList = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\r\n\tconst today = new Date();\r\n\tlet currentIndex = today.getDay() - 1;\r\n\tlet formattedForecast = [];\r\n\r\n\tfor (let i = 0; i < days; i++) {\r\n\t\tcurrentIndex = (currentIndex === dayList.length -1)? 0 : currentIndex + 1;\r\n\t\tformattedForecast.push(new Forecast(filteredForecast[i], dayList[currentIndex]));\r\n\t}\r\n\treturn formattedForecast;\r\n}\r\n\r\nexport default getWeather;","import React, {useState} from 'react';\r\nimport getWeather from '../../../api/get-weather';\r\nimport './city.scss';\r\n\r\nfunction CurrentCity(props) {\r\n\tconst defaultValue = 'Which city?';\r\n\tconst [city, setCity] = useState(defaultValue);\r\n\r\n\tfunction handleChange(e) {\r\n\t\tsetCity(e.target.value);\r\n\t}; \r\n\r\n\tfunction handleFocus () {\r\n\t\tif (city === defaultValue) {\r\n\t\t\tsetCity('');\r\n\t\t}\t\r\n\t};\r\n\r\n\tasync function updateData(inputCity) {\r\n\t\tprops.setLoading(true);\r\n\t\tconst newData = await getWeather(props.country, inputCity);\r\n\t\tif(newData === undefined) {\r\n\t\t\tprops.setLoading(false);\r\n\t\t\treturn alert('country or city can not found');\r\n\t\t}\r\n\t\tprops.updateDataArray(newData);\r\n\t\tprops.setLoading(false);\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\tconst validate = props.checkCityInput(city, props.country);\r\n\t\tif(validate) {\r\n\t\t\tupdateData(city);\r\n\t\t}\r\n\t\tsetCity(defaultValue);\r\n\t}\r\n\r\n\tfunction handleBlur (e){\r\n\t\treturn (city === '') && setCity(defaultValue);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className = 'City'>\r\n\t\t\t<h1>{props.city}</h1>\r\n\t\t\t<form className='City__form' onSubmit={handleSubmit}>\r\n\t\t\t\t<input  className='City__form__input'\r\n\t\t\t\t\t\tvalue={city}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\tonFocus={handleFocus}\r\n\t\t\t\t\t\tonBlur={handleBlur}\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CurrentCity;","import React from 'react';\r\nimport './info.scss';\r\n\r\nfunction CurrentInfo (props) {\r\n\treturn (\r\n\t\t<div className = 'CurrentInfo'>\r\n\t\t\t<div className = 'CurrentInfo__temperature'>\r\n\t\t\t\t<span>{props.temperature} °</span>\r\n\t\t\t</div>\r\n\t\t\t<div className = 'CurrentInfo__weather'>\r\n\t\t\t\t<span>{props.weather}</span>\r\n\t\t\t</div>\r\n\t\t\t<div className = 'CurrentInfo__details'>\r\n\t\t\t\t<div className = 'CurrentInfo__details__item'>\r\n\t\t\t\t\t<span>HUMIDITY</span>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<span>{props.humidity}%</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = 'division'></div>\r\n\t\t\t\t<div className = 'CurrentInfo__details__item'>\r\n\t\t\t\t\t<span>WIND</span>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<span>{props.wind} K/M</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CurrentInfo;","import React, {useState, useEffect} from 'react';\r\nimport './current.scss';\r\nimport {getCode, getName} from 'country-list';\r\nimport Country from './Country/country';\r\nimport CurrentCity from './City/city';\r\nimport CurrentInfo from './Info/info';\r\n\r\n\r\nfunction Current(props) {\r\n\tconst defaultValue = props.children.currentData.countryCode;\r\n\tconst [countryCode, setCountryCode] = useState(defaultValue);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tsetCountryCode(defaultValue);\r\n\t\t},\r\n\t\t[defaultValue]\r\n\t);\r\n\r\n\tfunction getCountryCode (inputCountry) {\r\n\t\tconst countryCodeLength = 2;\r\n\t\tconst validatedInput = getCode(inputCountry) || getName(inputCountry);\r\n\t\tif(validatedInput){\r\n\t\t\treturn (validatedInput.length > countryCodeLength)? inputCountry : validatedInput; \r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction onCountryChange (inputCountry) {\r\n\t\tconst inputCode = getCountryCode(inputCountry);\r\n\t\treturn inputCode && setCountryCode(inputCode.toUpperCase());\r\n\t}\r\n\r\n\tconst {currentData, setLoading, checkCityInput, updateDataArray} = props.children;\r\n\tconst {cityName, current} = currentData;\r\n\tconst {temperature, humidity, wind, weather} = current;\r\n\r\n\treturn (\r\n\t\t<div className = 'Current'>\r\n\t\t\t<Country \t\r\n\t\t\t\tcountry = {countryCode}\r\n\t\t\t\tonCountryChange = {onCountryChange}\r\n\t\t\t/>\r\n\t\t\t<CurrentInfo    \r\n\t\t\t\ttemperature = {temperature}\r\n\t\t\t\thumidity = {humidity}\r\n\t\t\t\twind = {wind}\r\n\t\t\t\tweather = {weather}\t\t\r\n\t\t\t/>\r\n\t\t\t<CurrentCity \t\r\n\t\t\t\tcity = {cityName}\r\n\t\t\t\tcountry = {countryCode}\r\n\t\t\t\tcheckCityInput = {checkCityInput}\r\n\t\t\t\tsetLoading = {setLoading}\r\n\t\t\t\tupdateDataArray ={updateDataArray}\r\n\t\t\t/>\r\n\t\t\t<div className = 'CurrentBottom'></div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Current;\r\n\r\n","import React, {Component} from 'react';\r\n\r\nclass OtherCityButton extends Component {\r\n\r\n\thandleClick = (e) => {\r\n\t\tthis.props.onOtherCitiesClick(this.props.index);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {city, temperature, icon, description} = this.props;\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<button \r\n\t\t\t\tclassName = 'OtherCityButton'\r\n\t\t\t\tonClick = {this.handleClick}\r\n\t\t\t>\r\n\t\t\t\t<h3 className = 'OtherCityButton__city'>\r\n\t\t\t\t\t{city}\r\n\t\t\t\t</h3>\r\n\t\t\t\t<div className = 'OtherCityButton__temperature'>\r\n\t\t\t\t\t{Math.round(temperature)} °\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = 'OtherCityButton__icon'>\r\n\t\t\t\t\t<img src ={`http://openweathermap.org/img/wn/${icon}.png`} alt = {description}/>\r\n\t\t\t\t</div>\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default OtherCityButton;","import React from 'react';\r\nimport OtherCityButton from './other-city-button';\r\n\r\nfunction OtherCityButtons (props) {\r\n\tconst {cityArray, onOtherCitiesClick} = props;\r\n\tconst buttons = cityArray.map((city, index) => \r\n\t\t<OtherCityButton    \r\n\t\t\tkey = {`${city.countryCode}${city.cityName}`}\r\n\t\t\tcity = {city.cityName}\r\n\t\t\ttemperature = {city.current.temperature}\r\n\t\t\ticon = {city.current.icon}\r\n\t\t\tdescription = {city.current.description}\r\n\t\t\tonOtherCitiesClick = {onOtherCitiesClick}\r\n\t\t\tindex = {index}  \r\n\t\t/>\r\n\t);\r\n\treturn (\r\n\t\t<div className = 'OtherCityButtons'>\r\n\t\t\t{buttons}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default OtherCityButtons;","import React from 'react';\r\nimport './other-cities.scss';\r\nimport OtherCityButtons from './other-city-buttons';\r\n\r\nfunction OtherCity (props) {\r\n\tconst {cityArray, onOtherCitiesClick} = props.children;\r\n\treturn (\r\n\t\t<div className = 'OtherCity'>\r\n\t\t\t<h2 className = 'OtherCity__title'>Other Cities</h2>\r\n\t\t\t<OtherCityButtons\r\n\t\t\t  cityArray = {cityArray}\r\n\t\t\t\tonOtherCitiesClick = {onOtherCitiesClick}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default OtherCity;","import React from 'react';\r\n\r\nfunction ForecastListItem (props) {\r\n\tconst iconUrlAddress = `http://openweathermap.org/img/wn/${props.info.icon}@2x.png`;\r\n\treturn (\r\n\t\t<div className = 'ForecastList__Item'>\r\n\t\t\t<h3 className = 'ForecastList__Item__day'>{props.info.day}</h3>\r\n\t\t\t<img className = 'ForecastList__Item__icon' src = {iconUrlAddress} alt = {props.info.description}/>\r\n\t\t\t<div className = 'ForecastList__Item__temperature'>{props.info.temperature} °</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ForecastListItem;","import React from 'react';\r\nimport './forecast-weather.scss';\r\nimport ForecastListItem from './forecast-list-item';\r\n\r\nfunction ForecastWeather (props) {\r\n\tconst forecastList = props.forecastArray.map((forecast) =>\r\n\t\t<ForecastListItem\r\n\t\t \tkey ={forecast.day} \r\n\t\t \tinfo = {forecast}\r\n\t\t/>\r\n\t);\r\n\treturn (\r\n\t\t<div className = 'ForecastWeather'>\r\n\t\t\t<h2 className = 'ForecastWeather__title'>\r\n\t\t\t\tForecast\r\n\t\t\t</h2>\r\n\t\t\t<div className = 'ForecastList'>\r\n\t\t\t\t{forecastList}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ForecastWeather;","import React from 'react';\r\nimport './weather-bottom.scss';\r\nimport OtherCity from './OtherCities/other-cities';\r\nimport ForecastWeather from './ForecastWeather/forecast-weather';\r\n\r\n\r\nfunction WeatherBottom (props) {\r\n\tconst {dataArray, onOtherCitiesClick} = props.children;\r\n\tconst cityArray = dataArray.slice(1);\r\n\tconst forecastArray = dataArray[0].forecast;\r\n\t\r\n\treturn (\r\n\t\t<div className = 'WeatherBottom'>\r\n\t\t\t<OtherCity>\r\n\t\t\t\t{\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcityArray,\r\n\t\t\t\t\t\tonOtherCitiesClick\r\n\t\t\t\t\t}    \r\n\t\t\t\t}\r\n\t\t\t</OtherCity>\r\n\t\t\t<div className = 'division'></div>\r\n\t\t\t<ForecastWeather forecastArray = {forecastArray}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default WeatherBottom;","import React, {useState, useEffect, useReducer} from 'react';\r\nimport './weather.scss';\r\nimport Current from '../Current/current';\r\nimport WeatherBottom from '../WeatherBottom/weather-bottom';\r\nimport getWeather from '../../api/get-weather';\r\n\r\n/* data format\t\t\t\t\t\t\t\t\t\r\ndata\r\n\t- cityName\r\n\t- current\r\n\t\ttemperature\t\r\n\t\thumidity\r\n\t\twind\r\n\t\tweather\r\n\t\ticon\r\n\t\tdescription\r\n\t- forecast[0]-[4] (same a current)\r\n\t- countryCode \r\n*/\r\n\r\nfunction Weather() {\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [dataArray, dispatch] = useReducer(updateArray, []);\r\n\t\r\n\tfunction updateArray(dataArray, action) {\r\n\t\tconst newDataArray = dataArray.map((city) => city);\r\n\t\tlet currentData;\r\n\t\tswitch(action.type) {\r\n\t\t\tcase 'New_Array':\r\n\t\t\t\treturn action.array;\r\n\t\t\tcase 'New_DATA':\r\n\t\t\t\tcurrentData  = action.data;\r\n\t\t\t\tnewDataArray.pop();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'SWITCH':\r\n\t\t\t\tcurrentData = newDataArray.splice(action.index, 1)[0];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error();\r\n\t\t}\r\n\t\tnewDataArray.unshift(currentData);\t\r\n\t\treturn newDataArray;\r\n\t}\r\n\t\r\n\tfunction newData(data) {\r\n\t\tdispatch({\r\n\t\t\ttype: 'New_DATA',\r\n\t\t\tdata: data, \r\n\t\t});\r\n\t}\r\n\r\n\tfunction reorderArray(index) {\r\n\t\tdispatch({\r\n\t\t\ttype: 'SWITCH',\r\n\t\t\tindex: index, \r\n\t\t});\r\n\t}\r\n\r\n\tfunction newArray(array) {\r\n\t\tdispatch({\r\n\t\t\ttype: 'New_Array',\r\n\t\t\tarray: array, \r\n\t\t});\r\n\t}\r\n\r\n\r\n\tasync function initialRequest () {\r\n\t\tconst defaultCities = ['Melbourne', 'Sydney', 'Brisbane', 'Perth'];\r\n\t\tconst defaultCountry = 'AU';\r\n\t\tconst dataArray = [];\r\n\t\tfor(let i = 0; i < defaultCities.length; i++) {\r\n\t\t\tlet city = defaultCities[i];\r\n\t\t\tlet cityData = await getWeather(defaultCountry, city);\r\n\t\t\tdataArray.push(cityData);\r\n\t\t}\r\n\t\tnewArray(dataArray);\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tinitialRequest();\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\r\n\tfunction onOtherCitiesClick(buttonIndex) {\r\n\t\tconst arrayIndex = buttonIndex + 1;\r\n\t\treorderArray(arrayIndex);\r\n\t}\r\n\r\n\tfunction checkCityInput (inputCity, inputCountry) {\r\n\t\tconst arrayIndex = dataArray.findIndex((data) => {\r\n\t\t\treturn (data.cityName.toUpperCase() === inputCity.toUpperCase()) &&\r\n\t\t\t\t\t(data.countryCode === inputCountry);\r\n\t\t});\r\n\t\tif(arrayIndex > 0 ) {\r\n\t\t\tconst buttonIndex = arrayIndex - 1;\r\n\t\t\tonOtherCitiesClick(buttonIndex);\r\n\t\t\treturn false;\r\n\t\t}else{\r\n\t\t\treturn (arrayIndex === 0)? false : true;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tconst loadingStyle = {\r\n\t\tborderRadius : '32px',\r\n\t};\r\n\tconst currentData = dataArray[0];\r\n\r\n\treturn (\r\n\t\t<div className = 'Weather'>\r\n\t\t\t{loading?\r\n\t\t\t\t<div className = 'Current' style = {loadingStyle}>\r\n\t\t\t\t\t<div className = 'loading'>\r\n\t\t\t\t\t\tLoading...\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t:\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Current>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrentData,\r\n\t\t\t\t\t\t\t\tsetLoading,\r\n\t\t\t\t\t\t\t\tcheckCityInput,\r\n\t\t\t\t\t\t\t\tupdateDataArray: newData\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Current>\r\n\t\t\t\t\t<WeatherBottom>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tdataArray,\r\n\t\t\t\t\t\t\t\tonOtherCitiesClick\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</WeatherBottom>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Weather from './components/Weather/weather'\n\n\nrequire('dotenv').config();\n\nfunction App() {\n\treturn (\n\t\t<div className = 'App'>\n\t\t\t<Weather/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}