{"version":3,"sources":["App/services/unit.js","App/components/Current/Country/country.js","App/api/weather-class.js","App/api/get-weather.js","App/components/Current/City/city.js","App/components/Current/Info/info.js","App/components/Current/current.js","App/components/WeatherBottom/OtherCities/other-city-button.js","App/components/WeatherBottom/OtherCities/other-city-buttons.js","App/components/WeatherBottom/OtherCities/other-cities.js","App/components/WeatherBottom/ForecastWeather/forecast-list-item.js","App/components/WeatherBottom/ForecastWeather/forecast-list.js","App/components/WeatherBottom/ForecastWeather/forecast-weather.js","App/components/WeatherBottom/weather-bottom.js","App/components/Weather/weather.js","App/App.js","serviceWorker.js","index.js"],"names":["xDigits","number","x","formatted","Math","round","module","exports","toCelsius","Kelvin","Celsius","toFahrenheit","Fahrenheit","windDirect","windDegree","parseInt","directionGap","Country","props","defaultValue","state","countryValue","hideInput","handleChange","bind","handleSubmit","handleBlur","handleFocus","toggleInput","this","setState","inputValue","e","updateDisplay","target","value","preventDefault","onCountryChange","country","className","onClick","onSubmit","onChange","onBlur","onFocus","Component","units","require","Weather","data","temperature","main","temp","humidity","wind","speed","weather","icon","description","Forecast","day","axios","APPID","process","openWeather","create","baseURL","params","appid","requestWeather","location","weatherType","route","response","get","q","getWeather","cc","city","Promise","all","then","responseArray","curRes","forRes","cityName","name","countryCode","current","forecast","filteredForecast","days","dayList","today","Date","currentIndex","getDay","formattedForecast","i","length","push","formatForecast","rawForecast","filterRawForecast","list","map","item","catch","err","console","log","message","CurrentCity","cityValue","resetDisplay","checkCityInput","updateData","inputCity","toggleLoading","undefined","newData","alert","updateDataArray","CurrentInfo","Current","children","newCode","prevProps","newCountryCode","updateCountryCode","inputCountry","validatedInput","getCode","getName","getCountryCode","toUpperCase","OtherCityButton","handleClick","onOtherCitiesClick","index","src","alt","OtherCityButtons","buttons","cityArray","key","OtherCity","ForecastListItem","iconUrlAddress","info","ForecastList","forecastList","forecastArray","ForecastWeather","WeatherBottom","dataArray","slice","loading","defaultCountry","defaultCity","booleanValue","newDataArray","findIndex","currentData","splice","unshift","pop","setDataArray","dataArrayIndex","cityNameList","cityData","initialRequest","style","borderRadius","config","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.94a98df4.chunk.js","sourcesContent":["function toCelsius (Kelvin) {\r\n    let Celsius = Kelvin - 273.15;\r\n    Celsius = xDigits(Celsius);\r\n    return Celsius;\r\n}\r\n\r\nfunction toFahrenheit (Kelvin) {\r\n    let Fahrenheit = 9 * (Kelvin - 273.15) / 5 + 32;\r\n    Fahrenheit = xDigits(Fahrenheit);\r\n    return Fahrenheit;\r\n}\r\n\r\n// default to one digits\r\nfunction xDigits (number, x = 1) {\r\n    let formatted = Math.round(number * 10**x) / 10**x;\r\n    return formatted;\r\n}\r\n\r\nfunction windDirect (windDegree) {\r\n    const directionList = [\"N\", \"NNE\",\"NE\",\"ENE\",\"E\",\"ESE\",\"SE\",\"SSE\",\"S\",\"SSW\",\"SW\",\"WSW\",\"W\",\"WNW\",\"NW\",\"NNW\",\"N\"];\r\n    const directionGap = 22.5;\r\n    const offset = directionGap/2;   //11.25 degree\r\n    const indexMapping = parseInt((windDegree + offset) / directionGap) + 1;\r\n    let direction = directionList[indexMapping];\r\n    return direction; \r\n}\r\n\r\nmodule.exports = {\r\n    toCelsius,\r\n    toFahrenheit,\r\n    windDirect\r\n};","import React from 'react';\r\nimport {Component} from 'react';\r\nimport './country.scss';\r\n\r\nclass Country extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.defaultValue = 'country or code';\r\n        this.state = {\r\n            countryValue : this.defaultValue,\r\n            hideInput : true\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleBlur = this.handleBlur.bind(this);\r\n        this.handleFocus = this.handleFocus.bind(this);\r\n        this.toggleInput = this.toggleInput.bind(this);\r\n    }\r\n\r\n    toggleInput() {\r\n        this.setState({\r\n            hideInput : !this.state.hideInput,\r\n            countryValue: this.defaultValue\r\n        });\r\n    }\r\n\r\n    updateDisplay(inputValue) {\r\n\t\tthis.setState({\r\n\t\t\tcountryValue: inputValue\r\n\t\t});\r\n    }\r\n    \r\n    handleChange(e) {\r\n        this.updateDisplay(e.target.value);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onCountryChange(this.state.countryValue);\r\n        this.toggleInput();\r\n    }\r\n\r\n    handleFocus(e) {\r\n\t\tif (this.state.countryValue === this.defaultValue) {\r\n\t\t\tthis.updateDisplay('');\r\n\t\t}\t\r\n\t}\r\n\r\n\thandleBlur(e) {\r\n        return (this.state.countryValue === '')? this.toggleInput() : this.handleSubmit(e);\r\n\t}\r\n\r\n    render() {\r\n        const {countryValue, hideInput} = this.state;\r\n        const {toggleInput, handleChange, handleSubmit, handleFocus, handleBlur} = this;\r\n        const {country} = this.props;\r\n\r\n        return (\r\n            <div className = 'Country'>\r\n                <div    className = 'Country__name'\r\n                        onClick = {toggleInput}\r\n                >\r\n                    {country}\r\n                </div>\r\n                {hideInput?\r\n                    ''\r\n                :\r\n                    <form   className = 'Country__form'\r\n                            onSubmit = {handleSubmit}\r\n                    >\r\n                        <input  value = {countryValue}\r\n                                onChange = {handleChange}\r\n                                onBlur = {handleBlur}\r\n                                onFocus = {handleFocus}\r\n                        />\r\n                    </form> \r\n                }   \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Country;","const units = require ('../services/unit');\r\n\r\nclass Weather {\r\n    constructor(data) {\r\n        this.temperature = units.toCelsius(data.main.temp);\r\n        this.humidity = data.main.humidity;\r\n        this.wind = data.wind.speed;\r\n        this.weather = data.weather[0].main;\r\n        this.icon = data.weather[0].icon;\r\n        this.description = data.weather[0].description;\r\n    }\r\n}\r\n\r\nclass Forecast {\r\n    constructor(data, day) {\r\n        this.day = day;\r\n        this.temperature = Math.round(data.temperature);\r\n        this.icon = data.icon;\r\n        this.description = data.description;\r\n    }\r\n}\r\nexport {Weather, Forecast};\r\n","import {Weather, Forecast} from './weather-class';\r\n\r\nconst axios = require('axios');\r\n\r\nlet APPID =`${process.env.REACT_APP_APPID}`;      // Fill in API key\r\n\r\nconst openWeather = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5',\r\n    params: {\r\n        appid: APPID\r\n    }            \r\n});\r\n\r\nfunction requestWeather (location, weatherType = 'current') {\r\n    const route = (weatherType === 'forecast')? '/forecast':'/weather';\r\n    const response = openWeather.get(route, {\r\n        params: { \r\n            q: location\r\n        }\r\n    });\r\n    return response;\r\n}\r\n\r\nfunction getWeather (cc, city) {\r\n    const location = `${city}, ${cc}`;\r\n    return Promise.all([requestWeather(location), requestWeather(location, 'forecast')])\r\n    .then((responseArray) =>{\r\n        const curRes = responseArray[0];\r\n        const forRes = responseArray[1];\r\n        const cityName = forRes.data.city.name;\r\n        const countryCode = forRes.data.city.country;\r\n        const current = new Weather (curRes.data);\r\n        const rawForecast = forRes.data.list.map(item => new Weather(item));\r\n        const filteredForecast = filterRawForecast(rawForecast);\r\n        const forecast = formatForecast(filteredForecast);\r\n        const data = {cityName, countryCode, current, forecast};\r\n        return data;\r\n    })\r\n    .catch(err => {\r\n        console.log(err.message);\r\n    });\r\n}\r\n\r\nfunction filterRawForecast (rawForecast) {\r\n    let filteredForecast = [];\r\n    for(let i = 0; i < rawForecast.length; i += 8) {\r\n        filteredForecast.push(rawForecast[i]);\r\n    }\r\n    return filteredForecast;\r\n}\r\n\r\nfunction formatForecast (filteredForecast, days = 5) {\r\n\tconst dayList = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\r\n\tconst today = new Date();\r\n\tlet currentIndex = today.getDay() - 1;\r\n\tlet formattedForecast = [];\r\n\r\n\tfor (let i = 0; i < days; i++) {\r\n\t\tcurrentIndex = (currentIndex === dayList.length -1)? 0 : currentIndex + 1;\r\n        formattedForecast.push(new Forecast(filteredForecast[i], dayList[currentIndex]));\r\n\t}\r\n\treturn formattedForecast;\r\n}\r\n\r\nexport default getWeather;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport getWeather from '../../../api/get-weather';\r\nimport './city.scss';\r\n\r\nclass CurrentCity extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.defaultValue = 'Which city?';\r\n\t\tthis.state = {\r\n\t\t\tcityValue : this.defaultValue,\r\n\t\t};\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.handleFocus = this.handleFocus.bind(this);\r\n\t\tthis.handleBlur = this.handleBlur.bind(this);\r\n\t}\r\n\r\n\tupdateDisplay(inputValue) {\r\n\t\tthis.setState({\r\n\t\t\tcityValue: inputValue\r\n\t\t});\r\n\t}\r\n\r\n\tresetDisplay() {\r\n\t\tthis.updateDisplay(this.defaultValue);\r\n\t}\r\n\r\n\thandleChange(e) {\r\n\t\tthis.updateDisplay(e.target.value);\r\n    }\r\n\r\n\thandleFocus(e) {\r\n\t\tif (this.state.cityValue === this.defaultValue) {\r\n\t\t\tthis.updateDisplay('');\r\n\t\t}\t\r\n\t}\r\n\r\n\thandleBlur(e) {\r\n\t\treturn (this.state.cityValue === '' || this.state.cityValue === this.defaultValue) ?\r\n\t\t\tthis.resetDisplay() :\r\n\t\t\tthis.handleSubmit(e); \r\n\t}\r\n\r\n\thandleSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\tconst validate = this.props.checkCityInput(this.state.cityValue, this.props.country);\r\n\t\tif(validate) {\r\n\t\t\tthis.updateData(this.state.cityValue);\r\n\t\t}\r\n\t\tthis.resetDisplay();\r\n\t}\r\n\t\r\n\tasync updateData(inputCity) {\r\n\t\tthis.props.toggleLoading(true);\r\n\t\tconst newData = await getWeather(this.props.country, inputCity);\r\n\t\tif(newData === undefined) {\r\n\t\t\tthis.props.toggleLoading(false);\r\n\t\t\treturn alert('country or city can not found');\r\n\t\t}\r\n\t\tthis.props.updateDataArray(newData);\r\n\t\tthis.props.toggleLoading(false);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className = 'City'>\r\n\t\t\t\t<h1>{this.props.city}</h1>\r\n\t\t\t\t<form className='City__form' onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<input  className='City__form__input'\r\n\t\t\t\t\t\t\tvalue={this.state.cityValue}\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\tonFocus={this.handleFocus}\r\n\t\t\t\t\t\t\tonBlur={this.handleBlur}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CurrentCity;","import React from 'react';\r\nimport './info.scss';\r\n\r\nfunction CurrentInfo (props) {\r\n\treturn (\r\n\t\t<div className = 'CurrentInfo'>\r\n\t\t\t<div className = 'CurrentInfo__temperature'>\r\n\t\t\t\t<span>{props.temperature} °</span>\r\n\t\t\t</div>\r\n\t\t\t<div className = 'CurrentInfo__weather'>\r\n\t\t\t\t<span>{props.weather}</span>\r\n\t\t\t</div>\r\n\t\t\t<div className = 'CurrentInfo__details'>\r\n\t\t\t\t<div className = 'CurrentInfo__details__item'>\r\n\t\t\t\t\t<span>HUMIDITY</span>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<span>{props.humidity}%</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = 'division'></div>\r\n\t\t\t\t<div className = 'CurrentInfo__details__item'>\r\n\t\t\t\t\t<span>WIND</span>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<span>{props.wind} K/M</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CurrentInfo;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport './current.scss';\r\nimport {getCode, getName} from 'country-list';\r\nimport Country from './Country/country';\r\nimport CurrentCity from './City/city';\r\nimport CurrentInfo from './Info/info';\r\n\r\n\r\nclass Current extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcountryCode: this.props.children.data.countryCode\r\n\t\t};\r\n\t\tthis.onCountryChange = this.onCountryChange.bind(this);\r\n\t}\r\n\r\n\tupdateCountryCode(newCode) {\r\n\t\tthis.setState({\r\n\t\t\tcountryCode: newCode\r\n\t\t});\r\n\t}\r\n\t\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tconst newCountryCode = this.props.children.data.countryCode;\r\n\t\tconst prevCountryCode = prevProps.children.data.countryCode;\r\n\t\tif( newCountryCode !== prevCountryCode) {\r\n\t\t\tthis.updateCountryCode(newCountryCode);\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCode(inputCountry) {\r\n\t\tconst countryCodeLength = 2;\r\n\t\tconst validatedInput = getCode(inputCountry) || getName(inputCountry);\r\n\t\tif(validatedInput){\r\n\t\t\treturn (validatedInput.length > countryCodeLength)? inputCountry : validatedInput; \r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tonCountryChange(inputCountry){\r\n\t\tconst countryCode = this.getCountryCode(inputCountry);\r\n\t\tif(countryCode) {\r\n\t\t\tthis.updateCountryCode(countryCode.toUpperCase());\r\n\t\t} \t\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst {data, toggleLoading, checkCityInput, updateDataArray} = this.props.children;\r\n\t\tconst {cityName, current} = data;\r\n\t\tconst {temperature, humidity, wind, weather} = current;\r\n\r\n\t\tconst {countryCode} = this.state;\r\n\t\tconst {onCountryChange} = this;\r\n\r\n\t\treturn (\r\n\t\t\t<div className = 'Current'>\r\n\t\t\t\t<Country \tcountry = {countryCode}\r\n\t\t\t\t\t\t\tonCountryChange = {onCountryChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<CurrentInfo    temperature = {temperature}\r\n\t\t\t\t\t\t\t\thumidity = {humidity}\r\n\t\t\t\t\t\t\t\twind = {wind}\r\n\t\t\t\t\t\t\t\tweather = {weather}\t\t\r\n\t\t\t\t/>\r\n\t\t\t\t<CurrentCity \tcity = {cityName}\r\n\t\t\t\t\t\t\t\tcountry = {countryCode}\r\n\t\t\t\t\t\t\t\tcheckCityInput = {checkCityInput}\r\n\t\t\t\t\t\t\t\ttoggleLoading = {toggleLoading}\r\n\t\t\t\t\t\t\t\tupdateDataArray ={updateDataArray}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className = 'CurrentBottom'></div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Current;\r\n","import React, {Component} from 'react';\r\n\r\nclass OtherCityButton extends Component {\r\n\r\n    handleClick = (e) => {\r\n        this.props.onOtherCitiesClick(this.props.index);\r\n    };\r\n\r\n    render() {\r\n        const {city, temperature, icon, description} = this.props;\r\n        \r\n        return (\r\n            <button className = 'OtherCityButton'\r\n                    onClick = {this.handleClick}\r\n            >\r\n                <h3 className = 'OtherCityButton__city'>\r\n                    {city}\r\n                </h3>\r\n                <div className = 'OtherCityButton__temperature'>\r\n                    {Math.round(temperature)} °\r\n                </div>\r\n                <div className = 'OtherCityButton__icon'>\r\n                    <img src ={`http://openweathermap.org/img/wn/${icon}.png`} alt = {description}/>\r\n                </div>\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OtherCityButton;","import React from 'react';\r\nimport OtherCityButton from './other-city-button';\r\n\r\nfunction OtherCityButtons (props) {\r\n    const cities = props.cityArray;\r\n    const buttons = cities.map((city, index) => \r\n        <OtherCityButton    key = {`${city.countryCode}${city.cityName}`}\r\n                            city = {city.cityName}\r\n                            temperature = {city.current.temperature}\r\n                            icon = {city.current.icon}\r\n                            description = {city.current.description}\r\n                            onOtherCitiesClick = {props.onOtherCitiesClick}\r\n                            index = {index}  \r\n         />\r\n    );\r\n    return (\r\n        <div className = 'OtherCityButtons'>\r\n            {buttons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OtherCityButtons;","import React from 'react';\r\nimport './other-cities.scss';\r\nimport OtherCityButtons from './other-city-buttons';\r\n\r\nfunction OtherCity (props) {\r\n    return (\r\n        <div className = 'OtherCity'>\r\n            <h2 className = 'OtherCity__title'>Other Cities</h2>\r\n            <OtherCityButtons   cityArray = {props.cityArray}\r\n                                onOtherCitiesClick = {props.onOtherCitiesClick}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OtherCity;","import React from 'react';\r\n\r\nfunction ForecastListItem (props) {\r\n    const iconUrlAddress = `http://openweathermap.org/img/wn/${props.info.icon}@2x.png`;\r\n    return (\r\n        <div className = 'ForecastList__Item'>\r\n            <h3 className = 'ForecastList__Item__day'>{props.info.day}</h3>\r\n            <img className = 'ForecastList__Item__icon' src = {iconUrlAddress} alt = {props.info.description}/>\r\n            <div className = 'ForecastList__Item__temperature'>{props.info.temperature} °</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForecastListItem;","import React from 'react';\r\nimport ForecastListItem from './forecast-list-item';\r\n\r\nfunction ForecastList (props) {\r\n    const forecastList = props.forecastArray.map((forecast) =>\r\n        <ForecastListItem key ={forecast.day} info = {forecast}/>\r\n    );\r\n    return (\r\n        <div className = 'ForecastList'>\r\n            {forecastList}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForecastList;","import React from 'react';\r\nimport './forecast-weather.scss';\r\nimport ForecastList from './forecast-list';\r\n\r\nfunction ForecastWeather (props) {\r\n    return (\r\n        <div className = 'ForecastWeather'>\r\n            <h2 className = 'ForecastWeather__title'>Forecast</h2>\r\n            <ForecastList forecastArray = {props.forecastArray}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForecastWeather;","import React from 'react';\r\nimport './weather-bottom.scss';\r\nimport OtherCity from './OtherCities/other-cities';\r\nimport ForecastWeather from './ForecastWeather/forecast-weather';\r\n\r\n\r\nfunction WeatherBottom (props) {\r\n    const {dataArray, onOtherCitiesClick} = props.children;\r\n    const cityArray = dataArray.slice(1);\r\n    const forecastArray = dataArray[0].forecast;\r\n    \r\n    return (\r\n        <div className = 'WeatherBottom'>\r\n            <OtherCity  cityArray = {cityArray}\r\n                        onOtherCitiesClick = {onOtherCitiesClick} \r\n            />\r\n            <div className = 'division'></div>\r\n            <ForecastWeather forecastArray = {forecastArray}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherBottom;","import React, {Component} from 'react';\r\nimport './weather.scss';\r\nimport Current from '../Current/current';\r\nimport WeatherBottom from '../WeatherBottom/weather-bottom';\r\nimport getWeather from '../../api/get-weather';\r\n\r\n/* data format\t\t\t\t\t\t\t\t\t\r\ndata\r\n\t- cityName\r\n\t- current\r\n\t\ttemperature\t\r\n\t\thumidity\r\n\t\twind\r\n\t\tweather\r\n\t\ticon\r\n\t\tdescription\r\n\t- forecast[0]-[4] (same a current)\r\n\t- countryCode \r\n*/\r\n\r\nclass Weather extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state ={\r\n\t\t\tloading : true,\r\n\t\t\tdataArray: []\r\n\t\t};\r\n\t\tthis.defaultCountry = 'AU';\r\n\t\tthis.defaultCity = ['Melbourne', 'Sydney', 'Brisbane', 'Perth'];\r\n\t\tthis.onOtherCitiesClick = this.onOtherCitiesClick.bind(this);\r\n\t\tthis.toggleLoading = this.toggleLoading.bind(this);\r\n\t\tthis.checkCityInput =this.checkCityInput.bind(this);\r\n\t\tthis.updateDataArray = this.updateDataArray.bind(this);\r\n\t}\r\n\r\n\ttoggleLoading(booleanValue) {\r\n\t\tthis.setState(\r\n\t\t\t{loading: booleanValue}\r\n\t\t);\r\n\t}\r\n\r\n\tsetDataArray(newDataArray) {\r\n\t\tthis.setState(\r\n\t\t\t{dataArray: newDataArray}\r\n\t\t);\r\n\t}\r\n\r\n\tcheckCityInput(inputCity, inputCountry) {\r\n\t\tconst index = this.state.dataArray.findIndex((data) => {\r\n\t\t\treturn (data.cityName.toUpperCase() === inputCity.toUpperCase()) &&\r\n\t\t\t\t\t(data.countryCode === inputCountry);\r\n\t\t});\r\n\t\tif(index > 0 ) {\r\n\t\t\tthis.onOtherCitiesClick(index - 1);\r\n\t\t\treturn false;\r\n\t\t}else{\r\n\t\t\treturn (index === 0)? false : true;\r\n\t\t}\r\n\t}\r\n\r\n\t//write new data: only pass in 'newData'\r\n\t//switch element order: only pass in 'index', switch position with the first element  \r\n\tupdateDataArray(newData, index = null) {\r\n\t\tconst newDataArray = this.state.dataArray.map((city) => city);\r\n\t\tconst currentData = (index)? newDataArray.splice(index, 1)[0] : newData;\r\n\t\tnewDataArray.unshift(currentData);\r\n\t\tif(newData){\r\n\t\t\tnewDataArray.pop();\r\n\t\t}\r\n\t\tthis.setDataArray(newDataArray);\r\n\t}\r\n\r\n\tonOtherCitiesClick(index) {\r\n\t\tconst dataArrayIndex = index + 1;\r\n\t\tthis.updateDataArray(undefined, dataArrayIndex);\r\n\t}\r\n\r\n\tasync initialRequest () {\r\n\t\tthis.toggleLoading(true);\r\n\t\tconst cityNameList = this.defaultCity;\r\n\t\tconst countryCode = this.defaultCountry;\r\n\t\tconst dataArray = [];\r\n\t\tfor(let i = 0; i < cityNameList.length; i++) {\r\n\t\t\tlet city = cityNameList[i];\r\n\t\t\tlet cityData = await getWeather(countryCode, city);\r\n\t\t\tdataArray.push(cityData);\r\n\t\t}\r\n\t\tthis.setDataArray(dataArray);\r\n\t\tthis.toggleLoading(false);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.initialRequest();\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst loadingStyle = {\r\n\t\t\tborderRadius : '32px',\r\n\t\t};\r\n\t\tconst {loading, dataArray} = this.state;\r\n\t\tconst data = dataArray[0];\r\n\t\tconst {toggleLoading, checkCityInput, updateDataArray, onOtherCitiesClick} = this;\r\n\t\r\n\t\treturn (\r\n\t\t\t<div className = 'Weather'>\r\n\t\t\t\t{loading?\r\n\t\t\t\t\t<div className = 'Current' style = {loadingStyle}>\r\n\t\t\t\t\t\t<div className = 'loading'>\r\n\t\t\t\t\t\t\tLoading...\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t:\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Current>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdata,\r\n\t\t\t\t\t\t\t\t\ttoggleLoading,\r\n\t\t\t\t\t\t\t\t\tcheckCityInput,\r\n\t\t\t\t\t\t\t\t\tupdateDataArray\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Current>\r\n\t\t\t\t\t\t<WeatherBottom>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdataArray,\r\n\t\t\t\t\t\t\t\t\tonOtherCitiesClick\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</WeatherBottom>\r\n\t\t\t\t\t</>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Weather from './components/Weather/weather'\n\n\nrequire('dotenv').config();\n\nfunction App() {\n\treturn (\n\t\t<div className = 'App'>\n\t\t\t<Weather/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}